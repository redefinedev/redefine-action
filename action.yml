name: redefine-action

description: Redefine is a CI Optimization platform for increased development velocity and experience

inputs:
  auth:
    description: "Redefine auth"
    required: true
  testing-framework:
    description: "The testing framework to optimize."
    required: false
    enum: ["pytest", "cypress"]
  command:
    description: "Redefine CLI command to perform."
    required: false
    default: "install"
    enum:
      ["install", "verify", "get session_check", "get session_id", "predict"]
  mode:
    description: "Redefine execution mode."
    required: false
    default: "discover"
    enum: ["discover", "prioritize", "optimize", "fail-fast", "worker"]
  python-venv-path:
    description: "Python virtual environment to install Redefine in."
    required: false
  time-limit:
    description: "The time limit for running Redefine."
    required: false
  min-accuracy:
    description: "The minimum accuracy for Redefine to achieve."
    required: false
  confidence:
    description: "Redefine confidence level."
    required: false
    enum: ["low", "high", "normal"]
  session-id:
    description: "The session ID matching between the orchestrator and the workers"
    required: false
  output-path:
    description: "Path to where the predicted tests will be written to in the format of a '\n' divided list"
    required: false
  predict-command:
    description: "Testing framework command to execute, for example: 'npx cypress run'"
    required: false
  timeout:
    description: "Timeout for the testing framework invocation command, default to 10 seconds"
    required: false
    default: 10
  exit-code:
    description: "Return exit code"
    required: false
    type: boolean
    default: false
  split:
    description: "When using Redefine Parallel, determines how many workers to split the tests into"
    required: false
  group:
    description: "When using Redefine Parallel, determines what group (index) the worker belongs to"
    required: false
  config-args:
    description: "Additional arguments to pass to the `config set` command in format of key1=value1 key2='long value2' ..."
    required: false
  args:
    description: "Additional arguments to pass to the main command."
    required: false

outputs:
  session-check:
    description: "`get session_check` command result. True if the session is still ongoing, false otherwise."
    value: ${{ steps.run-redefine.outputs.session-check }}
  session-id:
    description: "Session ID generated by 'get session_id' command"
    value: ${{ steps.run-redefine.outputs.session-id }}

branding:
  icon: "fast-forward"
  color: "purple"

runs:
  using: "composite"
  steps:
    - name: Run Redefine
      id: run-redefine
      shell: bash
      env:
        REDEFINE_AUTH: ${{ inputs.auth }}
        REDEFINE_SESSION_ID: ${{ inputs.session-id }}
      run: |
        if [ -z ${REDEFINE_SESSION_ID} ]; then
            # If session-id is empty we don't want an empty environment variable
            unset REDEFINE_SESSION_ID
        elif [ ${REDEFINE_SESSION_ID} = "UNUSED" ]; then
            # If session-id is UNUSED we don't want an empty environment variable
            echo "Aborting due to empty session-id, please make sure you configured the session-id properly"
            exit 1
        fi

        # Activate virtual environment
        if [ -n "${{ inputs.python-venv-path }}" ]; then
            source ${{ inputs.python-venv-path }}/bin/activate
        fi

        if ! redefine --version; then
            echo "Installing Redefine..."
            pip install -U --no-cache-dir --force-reinstall redefine --index-url https://pip.redefine.dev
        fi

        # Prep `redefine config set` command
        CONFIG_ARGS=""

        if [ -n "${{ inputs.time-limit }}" ]; then
            CONFIG_ARGS="${CONFIG_ARGS} time_limit=${{ inputs.time-limit }}"
        fi

        if [ -n "${{ inputs.min-accuracy }}" ]; then
            CONFIG_ARGS="${CONFIG_ARGS} min_accuracy=${{ inputs.min-accuracy }}"
        fi

        if [ -n "${{ inputs.confidence }}" ]; then
            CONFIG_ARGS="${CONFIG_ARGS} confidence=${{ inputs.confidence }}"
        fi

        CONFIG_ARGS="${CONFIG_ARGS} ${{ inputs.config-args }}"

        # Run redefine config set
        if [ -n "${CONFIG_ARGS}" ]; then
            echo "Running: redefine config set ${CONFIG_ARGS}"
            redefine config set ${CONFIG_ARGS}
        fi

        # Prep Redefine CLI command
        CMD_ARGS="${{ inputs.command }}"

        # if command is "install"/"predict"/"verify", add the testing framework
        if [ "${{ inputs.command }}" = "install" ] || [ "${{ inputs.command }}" = "verify" ] || [ "${{ inputs.command }}" = "predict" ]; then

            # Will fail at redefine command if missing, no need to add verification here.
            if [ -n "${{ inputs.testing-framework }}" ]; then
                CMD_ARGS="${CMD_ARGS} --${{ inputs.testing-framework }}"
            fi
        fi

        # if command is "install"/"predict", add the mode
        if [ "${{ inputs.command }}" = "install" ] || [ "${{ inputs.command }}" = "predict" ]; then

            # Will fail at redefine command if missing, no need to add verification here.
            if [ -n "${{ inputs.mode }}" ]; then
                CMD_ARGS="${CMD_ARGS} --${{ inputs.mode }}"
            fi
        fi

        # Add exit code arg to "install" command if needed
        if [ "${{ inputs.command }}" = "install" ] && [ ${{ inputs.exit-code }} = true ]; then
            CMD_ARGS="${CMD_ARGS} --exit-code"
        fi

        # if command is "verify" in "worker" mode, add the mode
        if [ "${{ inputs.command }}" = "verify" ] || [ "${{ inputs.mode }}" = "worker" ]; then

            # Will fail at redefine command if missing, no need to add verification here.
            if [ -n "${{ inputs.mode }}" ]; then
                CMD_ARGS="${CMD_ARGS} --${{ inputs.mode }}"
            fi
        fi


        # if command is "predict", add prediction output path and command
        if [ "${{ inputs.command }}" = "predict" ]; then
          # Will fail at redefine command if missing, no need to add verification here.
          if [ -n "${{ inputs.output-path }}" ]; then
              CMD_ARGS="${CMD_ARGS} --output-path=${{ inputs.output-path }}"
          fi
          if [ -n "${{ inputs.predict-command }}" ]; then
              CMD_ARGS="${CMD_ARGS} --command=\"${{ inputs.predict-command }}\""
          fi
          # has default, no need to check if set 
          CMD_ARGS="${CMD_ARGS} --timeout=${{ inputs.timeout }}"
        fi

        # if the user passed "split" and "group" arguments, add them to the command
        if [ -n "${{ inputs.split }}" ]; then
            CMD_ARGS="${CMD_ARGS} --split=${{ inputs.split }}"
        fi
        if [ -n "${{ inputs.group }}" ]; then
            CMD_ARGS="${CMD_ARGS} --group=${{ inputs.group }}"
        fi

        CMD_ARGS="${CMD_ARGS} ${{ inputs.args }}"

        # Run Redefine
        echo "Running: redefine ${CMD_ARGS}"
        OUTPUT=$(redefine ${CMD_ARGS})

        # Set the output variable in case command is `get session_check`
        if [ "${{ inputs.command }}" = "get session_check" ] && [ $? -eq 0 ]; then
            echo "session-check=true" >> "$GITHUB_OUTPUT"
        else
            # All commands other than `get session_check` set session-check to false
            echo "session-check=false" >> "$GITHUB_OUTPUT"
        fi

        # Set the output variable in case command is `get session_id`
        if [ "${{ inputs.command }}" = "get session_id" ]; then
            echo "session-id=$OUTPUT" >> "$GITHUB_OUTPUT"
        else
            # All commands other than `get session_id` set session-id to UNUSED
            echo "session-id=UNUSED" >> "$GITHUB_OUTPUT"
        fi
